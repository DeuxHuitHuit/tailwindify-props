{"version":3,"file":"transform.js","sourceRoot":"./src/","sources":["transform.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EAAE,8BAA8B,EAAE,MAAM,6CAA6C,CAAC;AAC7F,OAAO,EAAE,kCAAkC,EAAE,MAAM,iDAAiD,CAAC;AACrG,OAAO,EAAE,uCAAuC,EAAE,MAAM,sDAAsD,CAAC;AAC/G,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;AAEjF,MAAM,SAAS,GAAc,CAAC,MAAM,EAAE,EAAE;IACvC,MAAM,eAAe,GAAG,MAAM,EAAE,SAAS,IAAI,EAAE,CAAC;IAChD,MAAM,aAAa,GAAG,MAAM,EAAE,aAAa,IAAI,cAAc,CAAC;IAC9D,OAAO,CAAC,OAAO,EAAE,EAAE;QAClB,sCAAsC;QACtC,MAAM,KAAK,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACjD,uBAAuB;QACvB,MAAM,SAAS,GAAG,8BAA8B,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QACzE,kDAAkD;QAClD,OAAO,GAAG,kCAAkC,CAAC,OAAO,CAAC,CAAC;QACtD,iDAAiD;QACjD,OAAO,GAAG,uCAAuC,CAAC,OAAO,CAAC,CAAC;QAC3D,8CAA8C;QAC9C,OAAO,GAAG,wBAAwB,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QACtE,OAAO,OAAO,CAAC;IAChB,CAAC,CAAC;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC;AAE5B;;GAEG;AACH,MAAM,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC;AAE5B;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAc,CAAC,MAAM,EAAE,EAAE;IAC3C,MAAM,SAAS,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;IAC7B,OAAO,CAAC,OAAO,EAAE,EAAE;QAClB,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;QAC7B,0CAA0C;QAC1C,6HAA6H;QAC7H,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC;IAChB,CAAC,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Transform } from './types.js';\nimport { DEFAULT_SCREEN } from './constants.js';\nimport { extractTailwindifiedProps } from './helpers/extractTailwindifiedProps.js';\nimport { mergeUnknownPropsIntoReplacers } from './helpers/mergeUnknownPropsIntoReplacers.js';\nimport { resolveTypesScriptAttributesValues } from './helpers/resolveTypesScriptAttributesValues.js';\nimport { resolveJavaScriptObjectAttributesValues } from './helpers/resolveJavaScriptObjectAttributesValues.js';\nimport { convertToTailwindClasses } from './helpers/convertToTailwindClasses.js';\n\nconst transform: Transform = (config) => {\n\tconst configReplacers = config?.replacers || {};\n\tconst defaultScreen = config?.defaultScreen || DEFAULT_SCREEN;\n\treturn (content) => {\n\t\t// Extract prop names from tailwindify\n\t\tconst props = extractTailwindifiedProps(content);\n\t\t// Merge with replacers\n\t\tconst replacers = mergeUnknownPropsIntoReplacers(configReplacers, props);\n\t\t// Convert TypeScript declarations into attributes\n\t\tcontent = resolveTypesScriptAttributesValues(content);\n\t\t// Convert JavaScript object keys into attributes\n\t\tcontent = resolveJavaScriptObjectAttributesValues(content);\n\t\t// Pass all converters on the resulting string\n\t\tcontent = convertToTailwindClasses(content, replacers, defaultScreen);\n\t\treturn content;\n\t};\n};\n\n/**\n * Replaces typescript variables and objects with a tailwind compatible syntax.\n */\nexport const ts = transform;\n\n/**\n * Replaces javascript variables and objects with a tailwind compatible syntax.\n */\nexport const js = transform;\n\n/**\n * Replaces svelte props with a tailwind compatible syntax.\n */\nexport const svelte: Transform = (config) => {\n\tconst transform = ts(config);\n\treturn (content) => {\n\t\tcontent = transform(content);\n\t\t// Restore Tailwind's own Svelte transform\n\t\t// github.com/tailwindlabs/tailwindcss/blob/55653ba0041cf2806f236f00c59307b12f757385/src/jit/lib/expandTailwindAtRules.js#L23\n\t\tcontent = content.replace(/(?:^|\\s)class:/g, ' ');\n\t\treturn content;\n\t};\n};\n"]}