{"version":3,"file":"mergeUnknownPropsIntoReplacers.js","sourceRoot":"src/","sources":["helpers/mergeUnknownPropsIntoReplacers.ts"],"names":[],"mappings":"AAEA;;;;GAIG;AACH,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAC7C,SAAoB,EACpB,KAAkC,EACjC,EAAE;IACH,IAAI,CAAC,KAAK,EAAE;QACX,OAAO,SAAS,CAAC;KACjB;IACD,MAAM,eAAe,GAAc,EAAE,CAAC;IACtC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE;QAC/C,IAAI,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;YAC3B,OAAO;SACP;QACD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC1B,eAAe,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClE;aAAM;YACN,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,SAAS,CAAC;SAC1C;IACF,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,GAAG,SAAS,EAAE,GAAG,eAAe,EAAE,CAAC;AAC7C,CAAC,CAAC","sourcesContent":["import { ExtractedTailwindifiedProps, Replacers } from '../types.js';\n\n/**\n * Merges props into the global replacer dictionary.\n * @param {Record<string, string>} props\n * @returns undefined\n */\nexport const mergeUnknownPropsIntoReplacers = (\n\treplacers: Replacers,\n\tprops: ExtractedTailwindifiedProps\n) => {\n\tif (!props) {\n\t\treturn replacers;\n\t}\n\tconst customReplacers: Replacers = {};\n\tObject.entries(props).forEach(([key, prefix]) => {\n\t\tif (!!customReplacers[key]) {\n\t\t\treturn;\n\t\t}\n\t\tif (Array.isArray(prefix)) {\n\t\t\tcustomReplacers[key] = prefix.map((p) => `${p}-$value`).join(' ');\n\t\t} else {\n\t\t\tcustomReplacers[key] = `${prefix}-$value`;\n\t\t}\n\t});\n\treturn { ...replacers, ...customReplacers };\n};\n"]}