{"version":3,"file":"extractTailwindifiedProps.js","sourceRoot":"src/","sources":["helpers/extractTailwindifiedProps.ts"],"names":[],"mappings":"AAEA,MAAM,uBAAuB,GAAG,GAAG,EAAE,CACpC,uEAAuE,CAAC;AAEzE,MAAM,iBAAiB,GAAG,CACzB,KAAwC,EACxC,MAAyC,EACxC,EAAE;IACH,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAClD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;IACD,OAAO,KAAK,KAAK,MAAM,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,EAAE;IACxC,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACzF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;KACpB;IACD,OAAO,SAAS,CAAC;AAClB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,OAAe,EAAE,EAAE;IAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC,CAAC;IAC5D,MAAM,KAAK,GAAG,EAAiC,CAAC;IAChD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE;YACV,SAAS;SACT;QACD,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CACd,QAAQ,IAAI,oCAAoC,eAAe,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,CAClF,CAAC;SACF;QACD,KAAK,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;KAC9B;IACD,OAAO,KAAK,CAAC;AACd,CAAC,CAAC","sourcesContent":["import { ExtractedTailwindifiedProps, ExtractedTailwindifiedPropsPrefix } from '../types.js';\n\nconst TAILWINDIFY_CALL_REGEXP = () =>\n\t/tailwindify\\(\\[?((?:['\"`][A-z_-]+['\"`],?\\s?)+)\\]?,\\s?([A-z0-9\\_]+)\\)/g;\n\nconst arePrefixesEquals = (\n\tfirst: ExtractedTailwindifiedPropsPrefix,\n\tsecond: ExtractedTailwindifiedPropsPrefix\n) => {\n\tif (Array.isArray(first) && Array.isArray(second)) {\n\t\treturn first.every((prefix, i) => prefix === second[i]);\n\t}\n\treturn first === second;\n};\n\nconst processPrefix = (prefix: string) => {\n\tconst prefixArr = prefix.split(',').map((prefix) => prefix.replace(/['\"`]/g, '').trim());\n\tif (prefixArr.length === 1) {\n\t\treturn prefixArr[0];\n\t}\n\treturn prefixArr;\n};\n\n/**\n * Looks for calls to tailwindify()\n * and extracts the prop and prefix name.\n * @param {string} content\n * @return Record<string, string>\n */\nexport const extractTailwindifiedProps = (content: string) => {\n\tconst matches = content.matchAll(TAILWINDIFY_CALL_REGEXP());\n\tconst props = {} as ExtractedTailwindifiedProps;\n\tfor (const match of matches) {\n\t\tconst prop = match[2];\n\t\tconst prefix = match[1];\n\t\tif (!prop) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst processedPrefix = processPrefix(prefix);\n\t\tif (props[prop] && !arePrefixesEquals(props[prop], processedPrefix)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Prop ${prop} used with 2 different prefixes: ${processedPrefix}, ${props[prop]}.`\n\t\t\t);\n\t\t}\n\t\tprops[prop] = processedPrefix;\n\t}\n\treturn props;\n};\n"]}