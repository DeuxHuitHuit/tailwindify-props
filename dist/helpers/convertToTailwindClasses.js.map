{"version":3,"file":"convertToTailwindClasses.js","sourceRoot":"src/","sources":["helpers/convertToTailwindClasses.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;AAE3E,MAAM,gBAAgB,GAAG,gDAAgD,CAAC;AAE1E;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACvC,OAAe,EACf,SAAoB,EACpB,aAAqB,EACpB,EAAE;IACH,OAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,KAAK,EAAE,GAAG,IAAI,EAAE,EAAE;QAC3D,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAGjD,CAAC;QACF,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO,KAAK,CAAC;SACb;QACD,MAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,aAAa,CAAC;QACvD,OAAO,yBAAyB,CAC/B,MAAM,EACN,CAAC,KAAa,EAAE,EAAE;YACjB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBACnC,OAAO,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;aAClC;YACD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBACjC,OAAO,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;aACzE;YACD,OAAO,KAAK,CAAC;QACd,CAAC,EACD,aAAa,CACb,CAAC;IACH,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { BASE_REPLACER } from '../constants.js';\nimport { Screen, Replacers } from '../types.js';\nimport { generateClassesFromValues } from './generateClassesFromValues.js';\n\nconst RESP_ATTR_REGEXP = /(?<attribute>[a-zA-Z0-9]+)=\"(?<values>[^\"]+)\"/g;\n\n/**\n *\n * Convert responsive attributes to Tailwind classes, so that:\n * - attribute=\"mobile|desktop\" becomes attribute-mobile <default-screen>:attribute-desktop\n * - attribute=\"mobile|md:desktop\" attribute-mobile md:attribute-desktop\n * - attribute=\"mobile|md:desktop|hd:wide\" attribute-mobile md:attribute-desktop hd:attribute-wide\n * @param content\n * @param replacers\n * @param defaultScreen\n * @returns\n */\nexport const convertToTailwindClasses = (\n\tcontent: string,\n\treplacers: Replacers,\n\tdefaultScreen: Screen\n) => {\n\treturn content.replace(RESP_ATTR_REGEXP, (match, ...rest) => {\n\t\tconst { values, attribute } = rest[rest.length - 1] as {\n\t\t\tattribute: string;\n\t\t\tvalues: string;\n\t\t};\n\t\tif (!values) {\n\t\t\treturn match;\n\t\t}\n\t\tconst replacer = replacers[attribute] || BASE_REPLACER;\n\t\treturn generateClassesFromValues(\n\t\t\tvalues,\n\t\t\t(value: string) => {\n\t\t\t\tif (typeof replacer === 'function') {\n\t\t\t\t\treturn replacer(value, attribute);\n\t\t\t\t}\n\t\t\t\tif (typeof replacer === 'string') {\n\t\t\t\t\treturn replacer.replace(/\\$prop/g, attribute).replace(/\\$value/g, value);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tdefaultScreen\n\t\t);\n\t});\n};\n"]}